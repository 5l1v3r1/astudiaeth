/* Correction TD 2 */

/* 1.Résultant */
/* 1) */
>P = x^3 - 1
>Q = x^2 + 3*x + 1

* charpoly(w) pour connaitre la caractéristique d'un polynome
* polresultant(P, Q) donne la résultante du polynome

> polresultant(P, Q)
= 20

* Théorème: Si p ne divise pas le coefficient de plus haut degré de P ou de Q:
*  	    Res(f mod p, g mod p) = Res(f, g) mod p


*	    Res(P, Q) = 0 mod p <=> p / 20
       	      	    <=> p = 2 ou p = 5

/* 2) */
* A(x) = x^3 + 5*x + 7 = (x - a_1)(x - a_2)(x - a_3)
* B(x) = (x - (a_1)^2)(x - (a_2)^2)(x - (a_3)^2)

> polresultant(A, y - x^2)
= y^3 + 10*y^2 + 25*y - 49

* Ici on a a = x et x = y
* Donc B(x) = x^3 + 10*x^2 + 25*x - 49

/* 3) */
> f= x*(1+t^2)^3 - (4*t*(1-t^2)^2)
> g= y*(1+t^2)^3 - (8*t^2*(1-t^2)^2)
> polresultant(f,g,t)
= 1073741824*x^6 + (805306368*y^2 - 2147483648*y)*x^4 + (201326592*y^4 + 1073741824*y^3)*x^2 + (16777216*y^6 - 134217728*y^5)

/* 4) */
>poldisc(x^3 + a*x + b)
-4*a^3 - 27*b^2

Correction du prof :



/* Exercice 1.1 */
P=x^3-1;
Q=x^2+3*x+1;
polresultant(P,Q);
gcd(Mod(P,2),Mod(Q,2));
gcd(Mod(P,5),Mod(Q,5));

/* Exercice 1.2 */
A=x^3+5*x+7;
polresultant(A,y-x^2);

/* Exercice 1.3 */
f= x*(1+t^2)^3 - (4*t*(1-t^2)^2)
g= y*(1+t^2)^3 - (8*t^2*(1-t^2)^2)
polresultant(f,g,t)

/* Exercice 1.4 */
poldisc(x^3+a*x+b)

/* Exercice 2.1 */
E=ellinit([0,-1,1,-10,-20])
E.disc
E.j

E1=ellchangecurve(E,[1,0,0,-1/2]) /* élimine a_3 */
E2=ellchangecurve(E1,[1,1/3,0,0]) /* élimine a_2 */

F=ellchangecurve(E,[3,0,0,0])
F.disc
F.j

/* Question bonus */
ellequation(E) = {
  return (y^2+E.a1*x*y+E.a3*y-x^3-E.a2*x^2-E.a4*x-E.a6)
}

/* Exercice 2.2 */
/* ATTENTION: les fonctions myell* de cet exercice ne marchent que si E est
 * sous forme de Weierstrass courte! */

ellisoncurve
myellisoncurve(E,P) = {
  my(a,b,x,y);
  a=E.a4;
  b=E.a6;
  x=P[1];
  y=P[2];
  return (y^2-x^3-a*x-b == 0)
}

elladd
myelladd(E,P,Q) = {
  my(a,b,xP,yP,xQ,yQ,alpha,xR,yR);
  a=E.a4;
  b=E.a6;
  xP=P[1];
  yP=P[2];
  xQ=Q[1];
  yQ=Q[2];
  if (xP==xQ && yP==-yQ,
    return [0],
    if (xP==xQ, alpha= (3*xP^2+a)/(2*yP),
      alpha=(yQ-yP)/(xQ-xP));
    xR=alpha^2-xP-xQ;
    yR=yP+alpha*(xR-xP);
    return([xR,-yR])
  )
}

/* Exercice 2.3 */
ellisoncurve(E,P)
elmul(E,P,n)

/* Exercice 2.4 */
ellpuissance(E,P,n) =
{
  if(!ellisoncurve(E,P), error("Le point n'est pas sur la courbe"));
  my(y,z);
  y=[0];
  z=P;
  v=base2(n);

  for(i=1,length(v),
    if(v[i]!=0, y=elladd(E,y,z));
    z=elladd(E,z,z);
  );
  return(y);
}

Pour tester la vitesse d'execution taper '##' après la commande
